
AVRASM ver. 2.2.7  C:\Users\Hampus Österlund\Documents\Atmel Studio\7.0\Snake\Snake\main.asm Tue May 22 15:11:02 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Snake.asm
                                 ;
                                 ; Created: 2018-05-02 14:32:57
                                 ; Author : Hampus Ãsterlund, Rickardh Forslund
                                 ;
                                 
                                 .DEF rRandomXY = r2
                                 .DEF rAppleXY = r3
                                 .DEF rHead = r4
                                 
                                 .DEF rTemp = r16
                                 .DEF rTemp2 = r17
                                 .DEF rJoyX = r18
                                 .DEF rJoyY = r19
                                 .DEF rTime = r20
                                 .DEF rCurrentTime = r21
                                 .DEF rDirection = r22
                                 .DEF rLength = r23
                                 .DEF rTemp3 = r24
                                 .DEF rTemp4 = r25
                                 
                                 
                                 //Time for timer0
                                 .EQU STARTTIME = 10
                                 .EQU MAXLENGTH = 15
                                 
                                 .DSEG
000100                           matrix:	.BYTE 8
000108                           snake: .BYTE MAXLENGTH
                                 
                                 .CSEG
                                 //Interrupt vector table.
                                 .ORG 0x0000	//Reset vector.
000000 c033                      	rjmp reset
                                 .ORG 0x0020 //Timer0 overflow
000020 c037                      	rjmp timer0
                                 .ORG INT_VECTORS_SIZE
                                 
                                 reset:
                                     //Set stackpointer to highest memory address.
000034 e008                          ldi rTemp, HIGH(RAMEND)
000035 bf0e                          out SPH, rTemp
000036 ef0f                          ldi rTemp, LOW(RAMEND)
000037 bf0d                          out SPL, rTemp
                                 
                                 	//Set rTime
000038 e04a                      	ldi rTime, STARTTIME
                                 	//Set rCurrentTime
000039 e050                      	ldi rCurrentTime, 0
                                 
                                 	//Prescaling = 1024
00003a e005                      	ldi rTemp, 5
00003b bd05                      	out TCCR0B, rTemp
                                 	//Global interrupt enable
00003c 9478                      	sei
                                 	//Enable Overflow Interrupt
00003d e001                      	ldi rTemp, 1
00003e 9300 006e                 	sts TIMSK0, rTemp
                                 	//Set timer counter to 0
000040 e000                      	ldi rTemp, 0
000041 bd06                      	out TCNT0, rTemp
                                 
                                 	//Set ports C,D och B on LED-JOY to output.
000042 e00f                      	ldi rTemp, 0b00001111
000043 b907                      	out DDRC, rTemp
000044 ef0c                      	ldi rTemp, 0b11111100
000045 b90a                      	out DDRD, rTemp
000046 e30f                      	ldi rTemp, 0b00111111
000047 b904                      	out DDRB, rTemp
                                 
                                 	// Ledjoy A/D setup
000048 9100 007c                 	lds rTemp, ADMUX
00004a 6400                      	ori rTemp, 0b01000000
00004b 9300 007c                 	sts ADMUX, rTemp
                                 
00004d 9100 007a                 	lds rTemp, ADCSRA
00004f 6807                      	ori rTemp, 0b10000111
000050 9300 007a                 	sts ADCSRA, rTemp
                                 
                                 	//Initiate stuff.
000052 e063                      	ldi rDirection, 0b00000011
000053 d11d                      	rcall clear_matrix
000054 d198                      	rcall snake_create
000055 d0d3                      	rcall random
000056 d0d8                      	rcall apple_create
                                 
000057 c013                      	rjmp main
                                 
                                 timer0:
                                 	//Timer0 has been overflowed, start ISR.
                                 	//This ISR is where we have put our game code.
                                 
                                 	//Compare with rTime register.
000058 1745                      	cp rTime, rCurrentTime
000059 f010                      	brlo timer0_continue
00005a 9553                      	inc rCurrentTime
00005b 9518                      	reti
                                 
                                 	timer0_continue:
00005c 2755                      		clr rCurrentTime
                                 
                                 		//Push rTemp and SREG to stack to be able to restore them once we exit the interrupt.
00005d 930f                      		push rTemp
00005e b70f                      		in rTemp, SREG
00005f 930f                      		push rTemp
                                 
                                 		//GAME LOGIC HERE
                                 		//USE Z REGISTER AS POINTER TO MATRIX, IF USED IN GAME UPDATE TO PREVENT ERRORS.
                                 
                                 		game_update:
000060 d110                      			rcall clear_matrix
000061 d031                      			rcall move_direction
000062 d11a                      			rcall snake_move
000063 d161                      			rcall snake_render
000064 d105                      			rcall apple_check
000065 d0cd                      			rcall apple_update
000066 d0f5                      			rcall snake_check
                                 
                                 		//Pop SREG and rTemp from stack and restore them.
000067 910f                      		pop rTemp
000068 bf0f                      		out SREG, rTemp
000069 910f                      		pop rTemp
00006a 9518                      		reti
                                 
                                 main:
00006b d016                      	rcall input_x
00006c d003                      	rcall input_y
00006d d0bb                      	rcall random
00006e d03d                      	rcall screen_update
00006f cffb                      	rjmp main
                                 
                                 input_y:
                                 	// Y input
000070 9100 007c                 	lds rTemp, ADMUX
000072 7f0e                      	cbr rTemp, 1
000073 6204                      	ori rTemp, 0b00100100
000074 9300 007c                 	sts ADMUX, rTemp
                                 
000076 9100 007a                 	lds rTemp, ADCSRA
000078 6400                      	ori rTemp, (1<<ADSC)
000079 9300 007a                 	sts ADCSRA, rTemp
                                 
                                 	ad_doneY: 
00007b 9100 007a                 		lds rTemp, ADCSRA
00007d fd06                      		sbrc rTemp, 6
00007e cffc                      		rjmp ad_doneY
00007f 9130 0079                 	lds rJoyY, ADCH
000081 9508                      	ret
                                 
                                 input_x:
000082 9100 007c                 	lds rTemp, ADMUX
000084 6205                      	ori rTemp, 0b00100101
000085 9300 007c                 	sts ADMUX, rTemp
                                 
000087 9100 007a                 	lds rTemp, ADCSRA
000089 6400                      	ori rTemp, (1<<ADSC)
00008a 9300 007a                 	sts ADCSRA, rTemp
                                 
                                 	ad_doneX: 
00008c 9100 007a                 		lds rTemp, ADCSRA
00008e fd06                      		sbrc rTemp, 6
00008f cffc                      		rjmp ad_doneX
000090 9120 0079                 	lds rJoyX, ADCH
000092 9508                      	ret
                                 
                                 move_direction:
000093 3c35                      	cpi rJoyY, 197
000094 f438                      	brsh y_greater
                                 
000095 333e                      	cpi rJoyY, 62
000096 f048                      	brlo y_lower
                                 
000097 3829                      	cpi rJoyX, 137
000098 f458                      	brsh x_greater
                                 
000099 3624                      	cpi rJoyX, 100
00009a f068                      	brlo x_lower
                                 
                                 	move_done:
                                 
00009b 9508                      	ret
                                 
                                 	// Joystick up
                                 	y_greater:
00009c 3062                      		cpi rDirection, 0b00000010
00009d f3e9                      		breq move_done
00009e e061                      		ldi rDirection, 0b00000001
00009f 9508                      		ret
                                 	// Joystick down
                                 	y_lower:
0000a0 3061                      		cpi rDirection, 0b00000001
0000a1 f3c9                      		breq move_done
0000a2 e062                      		ldi rDirection, 0b00000010
0000a3 9508                      		ret
                                 	// Joystick left
                                 	x_greater:
0000a4 3064                      		cpi rDirection, 0b00000100
0000a5 f3a9                      		breq move_done
0000a6 e063                      		ldi rDirection, 0b00000011
0000a7 9508                      		ret
                                 	// Joystick right
                                 	x_lower:
0000a8 3063                      		cpi rDirection, 0b00000011
0000a9 f389                      		breq move_done
0000aa e064                      		ldi rDirection, 0b00000100
0000ab 9508                      		ret
                                 
                                 screen_update:
                                 	//Updates the screen with data from the 8 byte Matrix.
                                 	//
                                 	//The instructions: Resets columns, activates row, activates columns and finally deactivates the row.
                                 	//rcalling light columns several times to increase the time they get energized. (Increased light level)
                                 
                                 	//Reset pointer to Matrix.
0000ac e0d1                      	ldi YH, HIGH(matrix)
0000ad e0c0                      	ldi YL, LOW(matrix)
                                 
                                 	//Matrix 1
0000ae 9109                      	ld rTemp, Y+
0000af d04f                      	rcall reset_columns
0000b0 9a40                      	sbi PORTC, 0
0000b1 d056                      	rcall light_columns
0000b2 d055                      	rcall light_columns
0000b3 d054                      	rcall light_columns
0000b4 d053                      	rcall light_columns
0000b5 d052                      	rcall light_columns
0000b6 d051                      	rcall light_columns
0000b7 9840                      	cbi PORTC, 0
                                 	
                                 	//Matrix 2
0000b8 9109                      	ld rTemp, Y+
0000b9 d045                      	rcall reset_columns
0000ba 9a41                      	sbi PORTC, 1
0000bb d04c                      	rcall light_columns
0000bc d04b                      	rcall light_columns
0000bd d04a                      	rcall light_columns
0000be d049                      	rcall light_columns
0000bf d048                      	rcall light_columns
0000c0 d047                      	rcall light_columns
0000c1 9841                      	cbi PORTC, 1
                                 
                                 	//Matrix 3
0000c2 9109                      	ld rTemp, Y+
0000c3 d03b                      	rcall reset_columns
0000c4 9a42                      	sbi PORTC, 2
0000c5 d042                      	rcall light_columns
0000c6 d041                      	rcall light_columns
0000c7 d040                      	rcall light_columns
0000c8 d03f                      	rcall light_columns
0000c9 d03e                      	rcall light_columns
0000ca d03d                      	rcall light_columns
0000cb 9842                      	cbi PORTC, 2
                                 
                                 	//Matrix 4
0000cc 9109                      	ld rTemp, Y+
0000cd d031                      	rcall reset_columns
0000ce 9a43                      	sbi PORTC, 3
0000cf d038                      	rcall light_columns
0000d0 d037                      	rcall light_columns
0000d1 d036                      	rcall light_columns
0000d2 d035                      	rcall light_columns
0000d3 d034                      	rcall light_columns
0000d4 d033                      	rcall light_columns
0000d5 9843                      	cbi PORTC, 3
                                 
                                 	//Matrix 5
0000d6 9109                      	ld rTemp, Y+
0000d7 d027                      	rcall reset_columns
0000d8 9a5a                      	sbi PORTD, 2
0000d9 d02e                      	rcall light_columns
0000da d02d                      	rcall light_columns
0000db d02c                      	rcall light_columns
0000dc d02b                      	rcall light_columns
0000dd d02a                      	rcall light_columns
0000de d029                      	rcall light_columns
0000df 985a                      	cbi PORTD, 2
                                 
                                 	//Matrix 6
0000e0 9109                      	ld rTemp, Y+
0000e1 d01d                      	rcall reset_columns
0000e2 9a5b                      	sbi PORTD, 3
0000e3 d024                      	rcall light_columns
0000e4 d023                      	rcall light_columns
0000e5 d022                      	rcall light_columns
0000e6 d021                      	rcall light_columns
0000e7 d020                      	rcall light_columns
0000e8 d01f                      	rcall light_columns
0000e9 985b                      	cbi PORTD, 3
                                 
                                 	//Matrix 7
0000ea 9109                      	ld rTemp, Y+
0000eb d013                      	rcall reset_columns
0000ec 9a5c                      	sbi PORTD, 4
0000ed d01a                      	rcall light_columns
0000ee d019                      	rcall light_columns
0000ef d018                      	rcall light_columns
0000f0 d017                      	rcall light_columns
0000f1 d016                      	rcall light_columns
0000f2 d015                      	rcall light_columns
0000f3 985c                      	cbi PORTD, 4
                                 
                                 	//Matrix 8
0000f4 8108                      	ld rTemp, Y
0000f5 d009                      	rcall reset_columns
0000f6 9a5d                      	sbi PORTD, 5
0000f7 d010                      	rcall light_columns
0000f8 d00f                      	rcall light_columns
0000f9 d00e                      	rcall light_columns
0000fa d00d                      	rcall light_columns
0000fb d00c                      	rcall light_columns
0000fc d00b                      	rcall light_columns
0000fd 985d                      	cbi PORTD, 5
                                 
0000fe 9508                      	ret
                                 
                                 reset_columns:
                                 
0000ff 985e                      	cbi PORTD, 6
000100 985f                      	cbi PORTD, 7
000101 9828                      	cbi PORTB, 0
000102 9829                      	cbi PORTB, 1
000103 982a                      	cbi PORTB, 2
000104 982b                      	cbi PORTB, 3
000105 982c                      	cbi PORTB, 4
000106 982d                      	cbi PORTB, 5
000107 9508                      	ret
                                 
                                 light_columns:
                                 
                                 	//Light 1
000108 fd00                      	sbrc rTemp, 0
000109 9a5e                      	sbi PORTD, 6
00010a ff00                      	sbrs rTemp, 0
00010b 985e                      	cbi PORTD, 6
                                 
                                 	//Light 2 if set.
00010c fd01                      	sbrc rTemp, 1
00010d 9a5f                      	sbi PORTD, 7
00010e ff01                      	sbrs rTemp, 1
00010f 985f                      	cbi PORTD, 7
                                 
                                 	//Light 3 if set.
000110 fd02                      	sbrc rTemp, 2
000111 9a28                      	sbi PORTB, 0
000112 ff02                      	sbrs rTemp, 2
000113 9828                      	cbi PORTB, 0
                                 
                                 	//Light 4 if set.
000114 fd03                      	sbrc rTemp, 3
000115 9a29                      	sbi PORTB, 1
000116 ff03                      	sbrs rTemp, 3
000117 9829                      	cbi PORTB, 1
                                 
                                 	//Light 5 if set.
000118 fd04                      	sbrc rTemp, 4
000119 9a2a                      	sbi PORTB, 2
00011a ff04                      	sbrs rTemp, 4
00011b 982a                      	cbi PORTB, 2
                                 
                                 	//Light 6 if set.
00011c fd05                      	sbrc rTemp, 5
00011d 9a2b                      	sbi PORTB, 3
00011e ff05                      	sbrs rTemp, 5
00011f 982b                      	cbi PORTB, 3
                                 
                                 	//Light 7 if set.
000120 fd06                      	sbrc rTemp, 6
000121 9a2c                      	sbi PORTB, 4
000122 ff06                      	sbrs rTemp, 6
000123 982c                      	cbi PORTB, 4
                                 
                                 	//Light 8 if set.
000124 fd07                      	sbrc rTemp, 7
000125 9a2d                      	sbi PORTB, 5
000126 ff07                      	sbrs rTemp, 7
000127 982d                      	cbi PORTB, 5
                                 
000128 9508                      	ret
                                 
                                 random:
                                 	//Generate a random X value.
000129 0e22                      	add rRandomXY, rJoyX
00012a 0e23                      	add rRandomXY, rJoyY
00012b 2700                      	clr rTemp
00012c 5f0b                      	subi rTemp, -5
00012d 1a20                      	sub rRandomXY, rTemp
                                 
00012e 9508                      	ret
                                 
                                 apple_create:
                                 	//Create an apple for the matrix.
                                 
                                 	//Copy random values to the new apple position and remove bits.
00012f 2c32                      	mov rAppleXY, rRandomXY
000130 e707                      	ldi rTemp, 0b01110111
000131 2230                      	and rAppleXY, rTemp
                                 
000132 9508                      	ret
                                 
                                 apple_update:
                                 	//Load pointer to matrix.
000133 e0f1                      	ldi ZH, HIGH(matrix)
000134 e0e0                      	ldi ZL, LOW(matrix)
                                 
                                 	apple_Y:
                                 		//rTemp = Row, rTemp2 = i
000135 e700                      		ldi rTemp, 0b01110000
000136 2103                      		and rTemp, rAppleXY
000137 2711                      		clr rTemp2
                                 
000138 9488                      		clc
000139 9506                      		lsr rTemp
00013a 9488                      		clc
00013b 9506                      		lsr rTemp
00013c 9488                      		clc
00013d 9506                      		lsr rTemp
00013e 9488                      		clc
00013f 9506                      		lsr rTemp
                                 
                                 		apple_convert_Y:
000140 1701                      			cp rTemp, rTemp2
000141 f019                      			breq apple_X
000142 9181                      			ld rTemp3, Z+
000143 9513                      			inc rTemp2
000144 cffb                      			rjmp apple_convert_y
                                 
                                 	apple_X:
                                 	//rTemp = Row, rTemp2 = i, rTemp3 = Current column
000145 e007                      	ldi rTemp, 0b00000111
000146 2103                      	and rTemp, rAppleXY
000147 2711                      	clr rTemp2
000148 e081                      	ldi rTemp3, 0b00000001
                                 
                                 		apple_convert_X:
000149 1701                      			cp rTemp, rTemp2
00014a f021                      			breq apple_valid_position
00014b 9488                      			clc
00014c 0f88                      			lsl rTemp3
00014d 9513                      			inc rTemp2
00014e cffa                      			rjmp apple_convert_X
                                 
                                 			apple_valid_position:
00014f e0d1                      				ldi YH, HIGH(snake)
000150 e0c8                      				ldi YL, LOW(snake)
                                 
                                 				compare_apple_snake:
                                 				//Check if apple is not in snake.
000151 9109                      				ld rTemp, Y+
000152 9513                      				inc rTemp2
                                 
000153 1503                      				cp rTemp, rAppleXY
000154 f2d1                      				breq apple_create
                                 
000155 1771                      				cp rLength, rTemp2
000156 f008                      				brlo apple_set
                                 
                                 				
000157 cff9                      				rjmp compare_apple_snake
                                 
                                 	apple_set:
000158 8100                      	ld rTemp, Z
000159 2b08                      	or rTemp, rTemp3
00015a 8300                      	st Z, rTemp
                                 
00015b 9508                      	ret
                                 
                                 snake_check:
                                 	//Check for snake collision.
                                 	//rTemp = Current segment in snake, rTemp2 = i
00015c e0f1                      	ldi ZH, HIGH(snake)
00015d e0e8                      	ldi ZL, LOW(snake)
                                 
                                 	//Skip head, increase rTemp2
00015e 2711                      	clr rTemp2
00015f 9101                      	ld rTemp, Z+
000160 9513                      	inc rTemp2
                                 
                                 	snake_compare:
                                 	//Compare Head with current segment of the snake.
000161 9101                      	ld rTemp, Z+
000162 1640                      	cp rHead, rTemp
000163 f021                      	breq snake_collision
000164 9513                      	inc rTemp2
                                 	//Compare if there is another segment in the snake
000165 1717                      	cp rTemp2, rLength
000166 f3d0                      	brlo snake_compare
000167 9508                      	ret
                                 
                                 	snake_collision:
000168 decb                      		rcall reset
                                 
000169 9508                      	ret
                                 
                                 apple_check:
                                 	//Check for an apple collision.
                                 
00016a 8100                      	ld rTemp, Z
                                 
00016b 1443                      	cp rHead, rAppleXY
00016c f009                      	breq apple_collision
00016d 9508                      	ret
                                 	apple_collision:
00016e 9573                      	inc rLength
00016f dfbf                      	rcall apple_create
                                 
000170 9508                      	ret
                                 
                                 
                                 clear_matrix:
                                 	//Clear the matrix.
                                 
000171 e0f1                      	ldi ZH, HIGH(matrix)
000172 e0e0                      	ldi ZL, LOW(matrix)
                                 
000173 2700                      	clr rTemp
000174 9301                      	st Z+, rTemp
000175 9301                      	st Z+, rTemp
000176 9301                      	st Z+, rTemp
000177 9301                      	st Z+, rTemp
000178 9301                      	st Z+, rTemp
000179 9301                      	st Z+, rTemp
00017a 9301                      	st Z+, rTemp
00017b 8300                      	st Z, rTemp
                                 
00017c 9508                      	ret
                                 
                                 snake_move:
00017d e0d1                      	ldi YH, HIGH(snake)
00017e e0c8                      	ldi YL, LOW(snake)
                                 
                                 	snake_head:
00017f 8108                      		ld rTemp, Y
000180 2f10                      		mov rTemp2, rTemp
                                 
000181 3063                      		cpi rDirection, 0b00000011
000182 f1c9                      		breq snake_move_left
                                 
000183 3064                      		cpi rDirection, 0b00000100
000184 f0a1                      		breq snake_move_right
                                 
000185 7f00                      		cbr rTemp, 0b00001111
000186 9488                      		clc
000187 9506                      		lsr rTemp
000188 9506                      		lsr rTemp
000189 9506                      		lsr rTemp
00018a 9506                      		lsr rTemp
                                 
00018b 3061                      		cpi rDirection, 0b00000001
00018c f0a9                      		breq snake_move_up
                                 
00018d 3062                      		cpi rDirection, 0b00000010
00018e f101                      		breq snake_move_down
                                 
                                 	snake_head_moved:
00018f e010                      	ldi rTemp2, 0b00000000
000190 8108                      	ld rTemp, Y
000191 9249                      	st Y+, rHead
                                 
                                 	snake_loop:
000192 8188                      		ld rTemp3, Y
000193 9309                      		st Y+, rTemp
000194 2f08                      		mov rTemp, rTemp3
                                 		
000195 9513                      		inc rTemp2
000196 1717                      		cp rTemp2, rLength
000197 f3d0                      		brlo snake_loop
000198 9508                      	ret
                                 
                                 snake_move_right:
000199 700f                      	cbr rTemp, 0b11110000
00019a 3007                      	cpi rTemp, 0b00000111
00019b f409                      	brne right_no_teleport
00019c ef0f                      		ldi rTemp, 0b11111111
                                 	right_no_teleport:
00019d 9503                      	inc rTemp
                                 
00019e 7f10                      	cbr rTemp2, 0b00001111
00019f 2b10                      	or rTemp2, rTemp
0001a0 2e41                      	mov rHead, rTemp2
                                 
0001a1 cfed                      	rjmp snake_head_moved
                                 
                                 snake_move_up:
0001a2 3000                      	cpi rTemp, 0b00000000
0001a3 f409                      	brne up_no_teleport
0001a4 e008                      		ldi rTemp, 0b00001000
                                 	up_no_teleport:
0001a5 950a                      	dec rTemp
0001a6 9488                      	clc
0001a7 0f00                      	lsl rTemp
0001a8 0f00                      	lsl rTemp
0001a9 0f00                      	lsl rTemp
0001aa 0f00                      	lsl rTemp
                                 
0001ab 701f                      	cbr rTemp2, 0b11110000
0001ac 2b10                      	or rTemp2, rTemp
0001ad 2e41                      	mov rHead, rTemp2
                                 
0001ae cfe0                      	rjmp snake_head_moved
                                 
                                 snake_move_down:
0001af 3007                      	cpi rTemp, 0b00000111
0001b0 f409                      	brne down_no_teleport
0001b1 ef0f                      		ldi rTemp, 0b11111111
                                 	down_no_teleport:
0001b2 9503                      	inc rTemp
0001b3 9488                      	clc
0001b4 0f00                      	lsl rTemp
0001b5 0f00                      	lsl rTemp
0001b6 0f00                      	lsl rTemp
0001b7 0f00                      	lsl rTemp
                                 
0001b8 701f                      	cbr rTemp2, 0b11110000
0001b9 2b10                      	or rTemp2, rTemp
0001ba 2e41                      	mov rHead, rTemp2
                                 
0001bb cfd3                      	rjmp snake_head_moved
                                 
                                 snake_move_left:
0001bc 700f                      	cbr rTemp, 0b11110000
0001bd 3000                      	cpi rTemp, 0b00000000
0001be f409                      	brne left_no_teleport
0001bf e008                      		ldi rTemp, 0b00001000
                                 	left_no_teleport:
0001c0 950a                      	dec rTemp
                                 
0001c1 7f10                      	cbr rTemp2, 0b00001111
0001c2 2b10                      	or rTemp2, rTemp
0001c3 2e41                      	mov rHead, rTemp2
                                 
0001c4 cfca                      	rjmp snake_head_moved
                                 
                                 snake_render:
0001c5 e0b1                      	ldi XH, HIGH(matrix)
0001c6 e0a0                      	ldi XL, LOW(matrix)
                                 
0001c7 e090                      	ldi rTemp4, 0b00000000
                                 
                                 	render_loop:
0001c8 e0d1                      		ldi YH, HIGH(snake)
0001c9 e0c8                      		ldi YL, LOW(snake)
                                 
0001ca e010                      		ldi rTemp2, 0b00000000
                                 
                                 		snake_row_point_finder:
0001cb 9109                      			ld rTemp, Y+
0001cc 2f80                      			mov rTemp3, rTemp
                                 			
0001cd 7f00                      			cbr rTemp, 0b00001111
0001ce 9488                      			clc
0001cf 9506                      			lsr rTemp
0001d0 9506                      			lsr rTemp
0001d1 9506                      			lsr rTemp
0001d2 9506                      			lsr rTemp
                                 
0001d3 1709                      			cp rTemp, rTemp4
0001d4 f471                      			brne point_not_row
                                 
0001d5 2f08                      			mov rTemp, rTemp3
0001d6 7007                      			cbr rTemp, 0b11111000
0001d7 e081                      			ldi rTemp3, 0b00000001
                                 			
                                 			decrease_loop:
0001d8 3000                      				cpi rTemp, 0b00000000
0001d9 f031                      				breq end_decrease_loop
0001da 0000                      				nop
0001db 9488                      				clc
0001dc 950a                      				dec rTemp
0001dd 0f88                      				lsl rTemp3
0001de cff9                      				rjmp decrease_loop
0001df 0000                      				nop
                                 			end_decrease_loop:
0001e0 910c                      			ld rTemp, X
0001e1 2b08                      			or rTemp, rTemp3
0001e2 930c                      			st X, rTemp
                                 
                                 			point_not_row:
                                 
0001e3 9513                      			inc rTemp2
0001e4 1717                      			cp rTemp2, rLength
0001e5 f328                      			brlo snake_row_point_finder
0001e6 0000                      			nop
0001e7 9593                      		inc rTemp4
0001e8 911d                      		ld rTemp2, X+
0001e9 3098                      		cpi rTemp4, 0b00001000
0001ea f2e8                      		brlo render_loop
0001eb 0000                      		nop
                                 	//End render_loop
0001ec 9508                      	ret
                                 
                                 snake_create:
0001ed e073                      	ldi rLength, 0b00000011
                                 
0001ee e0d1                      	ldi YH, HIGH(snake)
0001ef e0c8                      	ldi YL, LOW(snake)
                                 
0001f0 e000                      	ldi rTemp, 0b00000000
0001f1 9309                      	st Y+, rTemp
0001f2 e001                      	ldi rTemp, 0b00000001
0001f3 9309                      	st Y+, rTemp
0001f4 e002                      	ldi rTemp, 0b00000010
0001f5 8308                      	st Y, rTemp
                                 
0001f6 9508                      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   3 y  :  18 z  :  14 r0 :   0 r1 :   0 r2 :   4 r3 :   6 r4 :   7 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 159 r17:  32 r18:   4 r19:   4 r20:   2 
r21:   4 r22:  13 r23:   6 r24:  11 r25:   4 r26:   1 r27:   1 r28:   5 
r29:   5 r30:   3 r31:   3 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   0 and   :   3 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  14 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 brlt  :   0 brmi  :   0 
brne  :   5 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  24 cbr   :  10 
clc   :  10 clh   :   0 cli   :   0 cln   :   0 clr   :   6 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  11 cpc   :   0 
cpi   :  18 cpse  :   0 dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :  12 jmp   :   0 
ld    :  20 ldd   :   0 ldi   :  49 lds   :  10 lpm   :   0 lsl   :  10 
lsr   :  12 mov   :   9 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   4 or    :   6 ori   :   6 out   :   8 pop   :   2 
push  :   2 rcall :  73 ret   :  21 reti  :   2 rjmp  :  14 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  16 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :  10 sbrs  :   8 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  15 std   :   0 sts   :   7 
sub   :   1 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 39 out of 113 (34.5%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003ee    906      0    906   32768   2.8%
[.dseg] 0x000100 0x000117      0     23     23    2048   1.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
